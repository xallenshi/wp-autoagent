import io
import os
import json
import time
import base64
import boto3
from botocore.exceptions import ClientError
from openai import OpenAI
import logging
logging.basicConfig(level=logging.ERROR)

def get_openai_api_key():

    secret_name = "OpenAI_API_Key"
    region_name = "ap-southeast-2"

    session = boto3.session.Session()
    client = session.client(
        service_name='secretsmanager',
        region_name=region_name
    )

    try:
        get_secret_value_response = client.get_secret_value(
            SecretId=secret_name
        )
    except ClientError as e:
        raise e

    secret = get_secret_value_response['SecretString']
    secret_dict = json.loads(secret)
    return secret_dict.get("OpenAI_API_Key")


def create_vector_store_id(client):
    result = client.vector_stores.create(name="knowledge_base")
    return result.id

def create_file(client, file_name, file_content_base64):
    file_content_bytes = base64.b64decode(file_content_base64)
    file_tuple = (file_name, file_content_bytes)
    result = client.files.create(
        file=file_tuple,
        purpose="assistants"
    )
    return result.id

def create_vector_store(client, vector_store_id, file_id):
    result = client.vector_stores.files.create(
        vector_store_id=vector_store_id,
        file_id=file_id
    )
    return result


def lambda_handler(event, context):

    #api_key = get_openai_api_key()
    api_key = os.getenv("OpenAI_API_Key")

    client = OpenAI(api_key=api_key)

    if 'body' in event:
        body = json.loads(event['body'])
        file_content_base64 = body.get('file_content')
        file_name = body.get('file_name')

        if not file_content_base64:
            return {'status_code': 400, 'body': json.dumps("No file content found in the request")}
    else:
        return {'status_code': 400, 'body': json.dumps("No file content found in the request")}

    vector_store_id = create_vector_store_id(client)
    logging.error("Vector Store ID: %s", vector_store_id)

    file_id = create_file(client, file_name, file_content_base64)
    logging.error("File ID: %s", file_id)

    result = create_vector_store(client, vector_store_id, file_id)
    logging.error("Result: %s", result)

    return {'status_code': 200, 'message': '!ok!', 'file_id': file_id, 'vector_store_id': vector_store_id}
