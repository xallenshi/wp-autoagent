import os
import time
import json
import boto3
import logging
from botocore.exceptions import ClientError

from openai import OpenAI
from qdrant_client import QdrantClient
from qdrant_client.http import models

logging.basicConfig(level=logging.ERROR)
logger = logging.getLogger()

# Initialize AWS clients
ssm = boto3.client('ssm')
sqs = boto3.client('sqs')
SQS_QUEUE_URL = os.environ['WPA_Qdrant_Queue_URL']

def get_openai_key(user_access_key):
    try:
        response = ssm.get_parameter(
            Name=f'{user_access_key}',
            WithDecryption=True
        )
        return response['Parameter']['Value']
    except ClientError as e:
        if e.response['Error']['Code'] == 'ParameterNotFound':
            logger.error(f"ssm.Parameter not found: {str(e)}")
            return None
    except Exception as e:
        logger.error(f"Unexpected ssm.get_parameter error: {str(e)}")
        return None

def get_qdrant_credentials():
    try:
        response = ssm.get_parameters(
            Names=['qdrant_url', 'qdrant_api_key'],
            WithDecryption=True
        )
        params = {p['Name']: p['Value'] for p in response['Parameters']}
        return params.get('qdrant_url'), params.get('qdrant_api_key')
    except Exception as e:
        logger.error(f"Error getting Qdrant credentials: {str(e)}")
        return None, None

def lambda_handler(event, context):
    # Initial setup
    user_access_key = event.get('headers', {}).get('x-access-key')
    if not user_access_key:
        return {'status_code': 401, 'message': '[System] No Access Key!'}

    api_key = get_openai_key(user_access_key)
    if not api_key:
        return {'status_code': 403, 'message': '[System] Unauthorized!'}

    if 'body' not in event:
        return {'status_code': 400, 'message': 'No body found in the request'}
    
    body = json.loads(event['body'])
    model = body.get('model', 'gpt-4o')
    instructions = body.get('instructions')
    content = body.get('content')
    tools = body.get('tools', [])

    logger.error(f"Received body: {body}")
    
    if not content:
        return {'status_code': 400, 'message': 'No content found in the request'}

    client = OpenAI(api_key=api_key)
    qdrant_url, qdrant_api_key = get_qdrant_credentials()
    embedding = None

    # Step 1: Qdrant similarity search
    if qdrant_url and qdrant_api_key:
        try:
            # Initialize client without context manager
            qdrant_client = QdrantClient(
                url=qdrant_url,
                api_key=qdrant_api_key,
                timeout=10
            )
            
            embedding = client.embeddings.create(
                input=content,
                model="text-embedding-3-small",
                dimensions=384
            ).data[0].embedding

            search_result = qdrant_client.search(
                collection_name=user_access_key,
                query_vector=embedding,
                limit=1,
                score_threshold=0.7
            )

            if search_result:
                return {
                    'status_code': 200,
                    'message': search_result[0].payload.get('answer'),
                    'source': 'qdrant',
                    'score': search_result[0].score
                }
        except Exception as e:
            logger.error(f"Qdrant operation error: {str(e)}")

    # Step 2: OpenAI response with function calling
    logger.error(f"OpenAI tools: {tools}")
    print("Type of tools:", type(tools))

    tools1 = [{
        "type": "function",
        "name": "wpa_track_order",
        "description": "Track order status",
        "parameters": {
                "type": "object",
                "properties": {
                "order_id": {
                    "type": "string",
                    "description": "Order # (e.g. #12345)"
                    }
                },
                "required": ["order_id"],
                "additionalProperties": False
                }
    }]

    try:
        instructions += "If your response is a follow-up message intended to request missing information needed to call a function, set the value of the 'type' field in your response to 'follow-up'."
        response = client.responses.create(
            model=model,
            input=[
                {"role": "system", "content": instructions},
                {"role": "user", "content": content}
            ],
            tools=tools,
            previous_response_id=body.get('response_id')
        )
        
        logger.error(f"OpenAI response: {response}")

        # Process tool calls
        previous_response_id = response.previous_response_id
        logger.error(f"Previous response ID: {previous_response_id}")

        for item in response.output:
            if item.type == "function_call":
                return {
                    'status_code': 200,
                    'type': 'function_call',
                    'message': item.name,
                    'source': 'openai',
                    'function_call': {
                        'name': item.name,
                        'arguments': item.arguments
                    }
                }
            
            if item.type == "message" and item.role == "assistant":
                message = next(
                    (c.text for c in item.content if c.type == "output_text"),
                    None
                )
                
                if not previous_response_id and message and embedding and qdrant_url and qdrant_api_key:
                    sqs.send_message(
                        QueueUrl=SQS_QUEUE_URL,
                        MessageBody=json.dumps({
                            'collection_name': user_access_key,
                            'embedding': embedding,
                            'content': content,
                            'message': message,
                            'timestamp': time.time()
                        })
                    )
                
                return {
                    'status_code': 200,
                    'type': 'message',
                    'response_id': response.id,
                    'message': message,
                    'source': 'openai'
                }

        return {'status_code': 500, 'message': 'No valid response generated'}

    except Exception as e:
        logger.error(f"OpenAI call failed: {str(e)}")
        return {'status': 503, 'status_code': 500, 'message': f'Error processing request: {str(e)}', 'source': 'openai'}