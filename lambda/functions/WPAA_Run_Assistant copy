import os
import time
import json
import boto3
import logging
from botocore.exceptions import ClientError

from openai import OpenAI
from qdrant_client import QdrantClient
from qdrant_client.http import models

logging.basicConfig(level=logging.ERROR)

ssm = boto3.client('ssm')

def get_openai_key(user_access_key):
    try:
        response = ssm.get_parameter(
            Name=f'{user_access_key}',
            WithDecryption=True
        )
        return response['Parameter']['Value']
    except ClientError as e:
        if e.response['Error']['Code'] == 'ParameterNotFound':
            logger.error(f"ssm.Parameter not found: {str(e)}")
            return None
    except Exception as e:
        logger.error(f"Unexpected ssm.get_parameter error: {str(e)}")
        return None

def lambda_handler(event, context):
    
    #api_key = os.getenv("OpenAI_API_Key")
    user_access_key = event.get('headers', {}).get('x-access-key')
    if not user_access_key:
        return {'status_code': 401, 'message': '[System] No Access Key!'}

    api_key = get_openai_key(user_access_key)
    if not api_key:
        return {'status_code': 403, 'message': '[System] Unauthorized!'}

    client = OpenAI(api_key=api_key)

    if 'body' in event:
        body = json.loads(event['body'])
        logging.error("body: %s", body)

        model = body.get('model')
        if model is None:
            model = 'gpt-4o-mini'

        instructions = body.get('instructions')
        content = body.get('content')

        input = []
        # Add system-level instructions
        input.append({'role': 'system', 'content': instructions})
        # Add user question
        input.append({'role': 'user', 'content': content})

        tools = body.get('tools')
        response_id = body.get('response_id')

        if not input:
            return {'status_code': 400, 'message': 'No input found in the request'}
    else:
        return {'status_code': 400, 'message': 'No body found in the request'}

    

    response = client.responses.create(
        model=model,
        input=input,
        tools=tools,
        previous_response_id=response_id
    )

    # Extract relevant information from the response
    message = None
    messages_object = []

    for item in response.output:
        if item.type == 'message' and item.role == 'assistant':
            content = item.content if hasattr(item, 'content') else []
            for c in content:
                if c.type == 'output_text':
                    message = c.text
            messages_object.append(item)

    logging.error("message: %s", message)

    return {
        'status_code': 200,
        'response_id': response.id,
        'message': message,
    }
