import os
import time
import json
import boto3
import logging
from botocore.exceptions import ClientError

from openai import OpenAI
from qdrant_client import QdrantClient
from qdrant_client.http import models

logging.basicConfig(level=logging.ERROR)
logger = logging.getLogger()

# Initialize AWS clients
ssm = boto3.client('ssm')
sqs = boto3.client('sqs')
SQS_QUEUE_URL = os.environ['WPAA_Qdrant_Queue_URL']

def get_openai_key(user_access_key):
    try:
        response = ssm.get_parameter(
            Name=f'{user_access_key}',
            WithDecryption=True
        )
        return response['Parameter']['Value']
    except ClientError as e:
        if e.response['Error']['Code'] == 'ParameterNotFound':
            logger.error(f"ssm.Parameter not found: {str(e)}")
            return None
    except Exception as e:
        logger.error(f"Unexpected ssm.get_parameter error: {str(e)}")
        return None

def get_qdrant_credentials():
    try:
        response = ssm.get_parameters(
            Names=['qdrant_url', 'qdrant_api_key'],
            WithDecryption=True
        )
        params = {p['Name']: p['Value'] for p in response['Parameters']}
        return params.get('qdrant_url'), params.get('qdrant_api_key')
    except Exception as e:
        logger.error(f"Error getting Qdrant credentials: {str(e)}")
        return None, None

def lambda_handler(event, context):
    # Initial setup
    user_access_key = event.get('headers', {}).get('x-access-key')
    if not user_access_key:
        return {
            'statusCode': 401,
            'body': json.dumps({'status_code': 401, 'message': '[System] No Access Key!', 'type': 'error'})
        }

    api_key = get_openai_key(user_access_key)
    if not api_key:
        return {
            'statusCode': 403,
            'body': json.dumps({'status_code': 403, 'message': '[System] Unauthorized!', 'type': 'error'})
        }

    if 'body' not in event:
        return {
            'statusCode': 400,
            'body': json.dumps({'status_code': 400, 'message': 'No body found in the request', 'type': 'error'})
        }
    
    try:
        body = json.loads(event['body'])
    except json.JSONDecodeError:
        return {
            'statusCode': 400,
            'body': json.dumps({'status_code': 400, 'message': 'Invalid JSON body', 'type': 'error'})
        }
        
    model = body.get('model', 'gpt-4')
    question = body.get('question') or body.get('content')  # Handle both field names
    input_messages = body.get('input', [])
    tools = body.get('tools', [])
    previous_response_id = body.get('response_id')

    if not question and not input_messages:
        return {
            'statusCode': 400,
            'body': json.dumps({'status_code': 400, 'message': 'No content found in the request', 'type': 'error'})
        }

    client = OpenAI(api_key=api_key)
    qdrant_url, qdrant_api_key = get_qdrant_credentials()
    embedding = None

    # Step 1: Qdrant similarity search (only for new questions, not function call follow-ups)
    if question and qdrant_url and qdrant_api_key:
        try:
            qdrant_client = QdrantClient(
                url=qdrant_url,
                api_key=qdrant_api_key,
                timeout=10
            )
            
            embedding = client.embeddings.create(
                input=question,
                model="text-embedding-3-small",
                dimensions=384
            ).data[0].embedding

            search_result = qdrant_client.search(
                collection_name=user_access_key,
                query_vector=embedding,
                limit=1,
                score_threshold=0.7
            )

            if search_result:
                return {
                    'statusCode': 200,
                    'body': json.dumps({
                        'status_code': 200,
                        'type': 'message',
                        'message': search_result[0].payload.get('answer'),
                        'source': 'qdrant',
                        'score': search_result[0].score,
                        'response_id': previous_response_id  # Maintain the same response_id
                    })
                }
        except Exception as e:
            logger.error(f"Qdrant operation error: {str(e)}")

    # Step 2: OpenAI responses API call
    try:
        # Prepare the input for the responses API
        response = client.responses.create(
            model=model,
            input=input_messages,
            tools=tools,
            previous_response_id=previous_response_id
        )
        
        logger.error(f"OpenAI response: {response}")

        # Process the response
        for item in response.output:
            if item.type == "function_call":
                return {
                    'statusCode': 200,
                    'body': json.dumps({
                        'status_code': 200,
                        'type': 'function_call',
                        'message': 'function called',
                        'call_id': item.call_id,
                        'function_call': {
                            'name': item.name,
                            'arguments': item.arguments
                        },
                        'response_id': response.id
                    })
                }
            
            if item.type == "message" and item.role == "assistant":
                # Find the text content in the message
                message_content = next(
                    (c.text for c in item.content if c.type == "output_text"),
                    None
                )
                
                # Only store new questions, not follow-up messages
                if message_content and embedding and qdrant_url and qdrant_api_key and question:
                    sqs.send_message(
                        QueueUrl=SQS_QUEUE_URL,
                        MessageBody=json.dumps({
                            'collection_name': user_access_key,
                            'embedding': embedding,
                            'content': question,
                            'message': message_content,
                            'timestamp': time.time()
                        })
                    )
                
                return {
                    'statusCode': 200,
                    'body': json.dumps({
                        'status_code': 200,
                        'type': 'message',
                        'response_id': response.id,
                        'message': message_content,
                        'source': 'openai',
                        'score': 1.0  # Default score for direct OpenAI responses
                    })
                }

        # If we get here, no valid response was found
        return {
            'statusCode': 500,
            'body': json.dumps({
                'status_code': 500,
                'message': 'No valid response generated',
                'type': 'error',
                'source': 'openai'
            })
        }

    except Exception as e:
        logger.error(f"OpenAI call failed: {str(e)}")
        return {
            'statusCode': 500,
            'body': json.dumps({
                'status_code': 500,
                'message': f'Error processing request: {str(e)}',
                'type': 'error',
                'source': 'openai'
            })
        }