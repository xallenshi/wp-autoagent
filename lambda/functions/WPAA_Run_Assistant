import os
import time
import json
from openai import OpenAI
import logging
logging.basicConfig(level=logging.ERROR)

def lambda_handler(event, context):
    
    #api_key = get_openai_api_key()
    api_key = os.getenv("OpenAI_API_Key")

    client = OpenAI(api_key=api_key)

    if 'body' in event:
        body = json.loads(event['body'])
        logging.error("body: %s", body)

        model = body.get('model')
        input = body.get('input')
        tools = body.get('tools')
        response_id = body.get('response_id')

        if not input:
            return {'status_code': 400, 'body': json.dumps("No input found in the request")}
    else:
        return {'status_code': 400, 'body': json.dumps("No body found in the request")}

    response = client.responses.create(
        model=model,
        input=input,
        tools=tools,
        previous_response_id=response_id
    )

    # Extract relevant information from the response
    message = None
    messages_object = []

    for item in response.output:
        if item.type == 'message' and item.role == 'assistant':
            content = item.content if hasattr(item, 'content') else []
            for c in content:
                if c.type == 'output_text':
                    message = c.text
            messages_object.append(item)

    return {
        'status_code': 200,
        'response_id': response.id,
        'message': message,
    }
