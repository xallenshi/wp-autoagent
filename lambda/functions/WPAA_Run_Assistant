import os
import time
import json
from openai import OpenAI
import logging
logging.basicConfig(level=logging.ERROR)

def lambda_handler(event, context):
    
    #api_key = get_openai_api_key()
    api_key = os.getenv("OpenAI_API_Key")

    client = OpenAI(api_key=api_key)

    if 'body' in event:
        body = json.loads(event['body'])
        assistant_id = body.get('assistant_id')
        thread_id = body.get('thread_id')
        instructions = body.get('instructions')
        content = body.get('content')

        if not assistant_id:
            return {'status_code': 400, 'body': json.dumps("No agent id found in the request")}
    else:
        return {'status_code': 400, 'body': json.dumps("No agent id found in the request")}

    if not thread_id:
        thread = client.beta.threads.create()
        thread_id = thread.id

    message = client.beta.threads.messages.create(
        thread_id=thread_id,
        role="user",
        content=content
    )

    run = client.beta.threads.runs.create_and_poll(
        thread_id=thread_id,
        assistant_id=assistant_id,
        instructions=instructions
    )

    while run.status not in ('completed', 'requires_action'):
        time.sleep(1)
        run = client.beta.threads.runs.retrieve(
            thread_id=thread_id,
            run_id=run.id
        )

    messages = client.beta.threads.messages.list(
        thread_id=thread_id
    )
    
    messages_object = [message.model_dump() for message in messages]

    first_message = messages_object[0]
    message = [
        content_item["text"]["value"]
        for content_item in first_message.get("content", [])
        if "text" in content_item and "value" in content_item["text"]
    ]

    return {'status_code': 200, 'message': message, 'messages_object': messages_object, 'thread_id': thread_id}

