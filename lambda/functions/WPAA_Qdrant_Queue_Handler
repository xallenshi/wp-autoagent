import json
import time
import boto3
import logging
from botocore.exceptions import ClientError
from qdrant_client import QdrantClient
from qdrant_client.http import models

# Initialize clients
ssm = boto3.client('ssm')
logging.basicConfig(level=logging.ERROR)

def get_qdrant_credentials():
    try:
        response = ssm.get_parameters(
            Names=['qdrant_url', 'qdrant_api_key'],
            WithDecryption=True
        )
        params = {p['Name']: p['Value'] for p in response['Parameters']}
        return params.get('qdrant_url'), params.get('qdrant_api_key')
    except Exception as e:
        logging.error(f"Error getting Qdrant credentials: {str(e)}")
        return None, None

def lambda_handler(event, context):
    
    # Get credentials once per invocation
    qdrant_url, qdrant_api_key = get_qdrant_credentials()
    if not qdrant_url or not qdrant_api_key:
        logging.error("Missing Qdrant credentials")
        return {'status': 'failed', 'reason': 'missing_credentials'}
    
    processed_count = 0
    for record in event['Records']:
        try:
            message = json.loads(record['body']) 
            # Initialize client with locally fetched credentials
            qdrant_client = QdrantClient(
                url=qdrant_url,
                api_key=qdrant_api_key
            )
            
            try:
                logging.error("staring points")
                qdrant_client.upsert(
                    collection_name=message['collection_name'],
                    points=[
                        models.PointStruct(
                            id=int(time.time() * 1000),
                            vector=message['embedding'],
                            payload={
                                "question": message['content'],
                                "answer": message['message'],
                                "timestamp": message['timestamp']
                            }
                        )
                    ]
                )
                processed_count += 1
                
            except Exception as e:
                logging.error(f"Qdrant upsert failed: {str(e)}")
                raise
            finally:
                qdrant_client.close()
                
        except Exception as e:
            logging.error(f"Failed to process message: {str(e)}")
            # Message will return to queue after visibility timeout
    
    return {
        'status': 'processed',
        'count': processed_count,
        'failed': len(event['Records']) - processed_count
    }